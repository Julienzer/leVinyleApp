const { Client } = require('pg');
require('dotenv').config();

console.log('üîß Correction des permissions PostgreSQL...\n');

async function fixPermissions() {
  // Essayer de se connecter avec l'utilisateur postgres (superuser)
  const postgresClient = new Client({
    user: 'postgres',
    host: process.env.DB_HOST || 'localhost',
    database: 'postgres', // Base par d√©faut
    password: process.env.DB_PASSWORD || '',
    port: process.env.DB_PORT || 5432,
  });

  try {
    console.log('üîå Connexion en tant que postgres...');
    await postgresClient.connect();
    console.log('‚úÖ Connect√© en tant que postgres');

    // 1. Cr√©er la base de donn√©es si elle n'existe pas
    const dbName = process.env.DB_NAME || 'le_vinyle';
    console.log(`\nüìä Cr√©ation de la base de donn√©es "${dbName}"...`);
    
    try {
      await postgresClient.query(`CREATE DATABASE "${dbName}"`);
      console.log(`‚úÖ Base de donn√©es "${dbName}" cr√©√©e`);
    } catch (error) {
      if (error.code === '42P04') {
        console.log(`‚úÖ Base de donn√©es "${dbName}" existe d√©j√†`);
      } else {
        throw error;
      }
    }

    // 2. Cr√©er l'utilisateur s'il n'existe pas
    const dbUser = process.env.DB_USER || 'postgres';
    const dbPassword = process.env.DB_PASSWORD || '';
    
    if (dbUser !== 'postgres') {
      console.log(`\nüë§ Cr√©ation de l'utilisateur "${dbUser}"...`);
      
      try {
        await postgresClient.query(`CREATE USER "${dbUser}" WITH PASSWORD '${dbPassword}'`);
        console.log(`‚úÖ Utilisateur "${dbUser}" cr√©√©`);
      } catch (error) {
        if (error.code === '42710') {
          console.log(`‚úÖ Utilisateur "${dbUser}" existe d√©j√†`);
        } else {
          throw error;
        }
      }

      // 3. Donner les permissions √† l'utilisateur
      console.log(`\nüîê Attribution des permissions √† "${dbUser}"...`);
      await postgresClient.query(`GRANT ALL PRIVILEGES ON DATABASE "${dbName}" TO "${dbUser}"`);
      console.log(`‚úÖ Permissions accord√©es sur la base de donn√©es`);
    }

    await postgresClient.end();

    // 4. Se connecter √† la base de donn√©es cible pour donner les permissions sur le sch√©ma
    const targetClient = new Client({
      user: 'postgres',
      host: process.env.DB_HOST || 'localhost',
      database: dbName,
      password: process.env.DB_PASSWORD || '',
      port: process.env.DB_PORT || 5432,
    });

    console.log(`\nüîå Connexion √† la base de donn√©es "${dbName}"...`);
    await targetClient.connect();
    console.log('‚úÖ Connect√© √† la base de donn√©es cible');

    if (dbUser !== 'postgres') {
      console.log(`\nüîê Attribution des permissions sur le sch√©ma public...`);
      await targetClient.query(`GRANT ALL ON SCHEMA public TO "${dbUser}"`);
      await targetClient.query(`GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO "${dbUser}"`);
      await targetClient.query(`GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO "${dbUser}"`);
      await targetClient.query(`ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO "${dbUser}"`);
      await targetClient.query(`ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO "${dbUser}"`);
      console.log(`‚úÖ Permissions accord√©es sur le sch√©ma public`);
    }

    await targetClient.end();

    console.log('\nüéâ Permissions corrig√©es avec succ√®s !');
    console.log('\nüöÄ Vous pouvez maintenant ex√©cuter :');
    console.log('   npm run setup-db');
    console.log('   npm run dev');

  } catch (error) {
    console.error('‚ùå Erreur lors de la correction des permissions:', error.message);
    console.error('\nüîß Solutions possibles :');
    console.error('1. V√©rifiez que PostgreSQL est d√©marr√©');
    console.error('2. V√©rifiez le mot de passe de l\'utilisateur postgres');
    console.error('3. Modifiez votre .env avec les bonnes credentials');
    console.error('4. Utilisez DB_USER=postgres dans votre .env');
    throw error;
  }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  fixPermissions()
    .then(() => {
      console.log('\n‚úÖ Correction termin√©e avec succ√®s');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå Correction √©chou√©e:', error);
      process.exit(1);
    });
}

module.exports = fixPermissions; 