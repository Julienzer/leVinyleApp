const { Client } = require('pg');
require('dotenv').config();

async function cleanDatabase() {
  console.log('üßπ Nettoyage complet de la base de donn√©es...\n');
  
  const config = {
    user: process.env.DB_USER || 'postgres',
    host: process.env.DB_HOST || 'localhost',
    database: process.env.DB_NAME || 'le_vinyle',
    password: process.env.DB_PASSWORD || '',
    port: process.env.DB_PORT || 5432,
  };

  console.log('üìä Configuration de la base de donn√©es:', {
    user: config.user,
    host: config.host,
    database: config.database,
    port: config.port
  });

  const client = new Client(config);

  try {
    await client.connect();
    console.log('‚úÖ Connect√© √† la base de donn√©es\n');

    // Supprimer toutes les tables dans l'ordre correct (contraintes)
    const tablesToDrop = [
      'session_history',
      'moderators', 
      'propositions',
      'sessions',
      'users',
      'tracks' // Ancienne table si elle existe
    ];

    console.log('üóëÔ∏è Suppression des tables existantes...');
    for (const table of tablesToDrop) {
      try {
        await client.query(`DROP TABLE IF EXISTS ${table} CASCADE`);
        console.log(`   ‚úÖ Table ${table} supprim√©e`);
      } catch (error) {
        console.log(`   ‚ö†Ô∏è Table ${table} : ${error.message}`);
      }
    }

    // Supprimer les fonctions si elles existent
    console.log('\nüîß Suppression des fonctions...');
    try {
      await client.query('DROP FUNCTION IF EXISTS update_updated_at_column() CASCADE');
      console.log('   ‚úÖ Fonction update_updated_at_column supprim√©e');
    } catch (error) {
      console.log(`   ‚ö†Ô∏è Fonction : ${error.message}`);
    }

    // Supprimer les types personnalis√©s si ils existent
    console.log('\nüé® Nettoyage des types personnalis√©s...');
    try {
      await client.query('DROP TYPE IF EXISTS user_role CASCADE');
      await client.query('DROP TYPE IF EXISTS proposition_status CASCADE');
      await client.query('DROP TYPE IF EXISTS queue_mode CASCADE');
      console.log('   ‚úÖ Types personnalis√©s supprim√©s');
    } catch (error) {
      console.log(`   ‚ö†Ô∏è Types : ${error.message}`);
    }

    console.log('\nüéâ Base de donn√©es nettoy√©e avec succ√®s !');
    console.log('\nüöÄ Vous pouvez maintenant ex√©cuter :');
    console.log('   npm run setup-db');

  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error.message);
    throw error;
  } finally {
    await client.end();
    console.log('üîå Connexion ferm√©e');
  }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  cleanDatabase()
    .then(() => {
      console.log('\n‚úÖ Nettoyage termin√© avec succ√®s');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå Nettoyage √©chou√©:', error);
      process.exit(1);
    });
}

module.exports = cleanDatabase; 