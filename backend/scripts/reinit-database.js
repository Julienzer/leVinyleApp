#!/usr/bin/env node

/**
 * Script de r√©initialisation compl√®te de la base de donn√©es
 * Usage: node backend/scripts/reinit-database.js
 */

const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

// Configuration de la base de donn√©es
const dbConfig = {
  user: process.env.DB_USER || 'postgres',
  host: process.env.DB_HOST || 'localhost',
  database: 'postgres', // Se connecter √† la base syst√®me pour pouvoir cr√©er/supprimer
  password: process.env.DB_PASSWORD || 'root',
  port: process.env.DB_PORT || 5432,
};

const TARGET_DATABASE = 'le_vinyle';

console.log('üîß === R√âINITIALISATION COMPL√àTE DE LA BASE ===');
console.log('üìç Configuration:', {
  host: dbConfig.host,
  port: dbConfig.port,
  user: dbConfig.user,
  target_database: TARGET_DATABASE
});

async function reinitializeDatabase() {
  const pool = new Pool(dbConfig);
  
  try {
    console.log('\nüîç V√©rification de la connexion PostgreSQL...');
    const client = await pool.connect();
    const versionResult = await client.query('SELECT version()');
    console.log('‚úÖ Connexion r√©ussie:', versionResult.rows[0].version.split(' ').slice(0, 2).join(' '));
    client.release();

    console.log('\nüóëÔ∏è  Suppression de l\'ancienne base de donn√©es...');
    try {
      // Fermer toutes les connexions actives √† la base cible
      await pool.query(`
        SELECT pg_terminate_backend(pg_stat_activity.pid)
        FROM pg_stat_activity
        WHERE pg_stat_activity.datname = $1
          AND pid <> pg_backend_pid()
      `, [TARGET_DATABASE]);
      
      await pool.query(`DROP DATABASE IF EXISTS ${TARGET_DATABASE}`);
      console.log('‚úÖ Ancienne base supprim√©e');
    } catch (error) {
      console.log('‚ö†Ô∏è  Avertissement lors de la suppression:', error.message);
    }

    console.log('\nüÜï Cr√©ation de la nouvelle base de donn√©es...');
    await pool.query(`CREATE DATABASE ${TARGET_DATABASE}`);
    console.log('‚úÖ Base de donn√©es cr√©√©e');

    // Se reconnecter √† la nouvelle base
    await pool.end();
    const newPool = new Pool({
      ...dbConfig,
      database: TARGET_DATABASE
    });

    console.log('\nüîß Ex√©cution du script d\'initialisation...');
    const sqlPath = path.join(__dirname, '..', 'db', 'init.sql');
    
    if (!fs.existsSync(sqlPath)) {
      throw new Error(`Script SQL introuvable: ${sqlPath}`);
    }

    const sqlContent = fs.readFileSync(sqlPath, 'utf8');
    console.log('üìÑ Script SQL charg√©:', sqlPath);
    console.log('üìè Taille:', Math.round(sqlContent.length / 1024), 'KB');

    // Ex√©cuter le script SQL
    await newPool.query(sqlContent);
    console.log('‚úÖ Script d\'initialisation ex√©cut√©');

    // V√©rifier le r√©sultat
    console.log('\nüìä V√©rification de la structure cr√©√©e...');
    const tablesResult = await newPool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);

    const tables = tablesResult.rows.map(row => row.table_name);
    console.log('üìã Tables cr√©√©es:', tables.join(', '));

    // Statistiques des donn√©es de test
    const stats = await newPool.query(`
      SELECT 
        (SELECT COUNT(*) FROM users) as users_count,
        (SELECT COUNT(*) FROM sessions) as sessions_count,
        (SELECT COUNT(*) FROM propositions) as propositions_count,
        (SELECT COUNT(*) FROM playlists) as playlists_count
    `);

    const counts = stats.rows[0];
    console.log('üìà Donn√©es de test ins√©r√©es:');
    console.log(`   ‚Ä¢ Utilisateurs: ${counts.users_count}`);
    console.log(`   ‚Ä¢ Sessions: ${counts.sessions_count}`);
    console.log(`   ‚Ä¢ Propositions: ${counts.propositions_count}`);
    console.log(`   ‚Ä¢ Playlists: ${counts.playlists_count}`);

    // V√©rifier les colonnes Spotify
    const spotifyColumns = await newPool.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'users' 
        AND column_name LIKE '%spotify%'
      ORDER BY column_name
    `);

    console.log('üéµ Colonnes Spotify dans users:', 
      spotifyColumns.rows.map(row => row.column_name).join(', '));

    await newPool.end();

    console.log('\n‚úÖ === R√âINITIALISATION TERMIN√âE AVEC SUCC√àS ! ===');
    console.log('üöÄ La base de donn√©es est pr√™te pour le d√©veloppement');
    console.log('üîó Connectez-vous avec: psql -U postgres -d le_vinyle');

  } catch (error) {
    console.error('\n‚ùå === ERREUR LORS DE LA R√âINITIALISATION ===');
    console.error('Type:', error.constructor.name);
    console.error('Message:', error.message);
    
    if (error.code) {
      console.error('Code PostgreSQL:', error.code);
    }
    
    if (error.detail) {
      console.error('D√©tail:', error.detail);
    }

    console.error('\nüîß Solutions possibles:');
    console.error('‚Ä¢ V√©rifiez que PostgreSQL est d√©marr√©');
    console.error('‚Ä¢ V√©rifiez les variables d\'environnement DB_*');
    console.error('‚Ä¢ V√©rifiez les permissions utilisateur');
    
    process.exit(1);
  } finally {
    try {
      await pool.end();
    } catch (e) {
      // Ignorer les erreurs de fermeture
    }
  }
}

// Gestion des signaux pour fermeture propre
process.on('SIGINT', () => {
  console.log('\n‚ö†Ô∏è  Arr√™t demand√© par l\'utilisateur');
  process.exit(1);
});

process.on('SIGTERM', () => {
  console.log('\n‚ö†Ô∏è  Arr√™t demand√© par le syst√®me');
  process.exit(1);
});

// Ex√©cution
if (require.main === module) {
  reinitializeDatabase().catch(error => {
    console.error('Erreur fatale:', error);
    process.exit(1);
  });
}

module.exports = { reinitializeDatabase }; 