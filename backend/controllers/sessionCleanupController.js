const db = require('../db');
const Session = require('../models/Session');

class SessionCleanupController {
  
  // Obtenir les statistiques de nettoyage des sessions
  static async getCleanupStats(req, res) {
    try {
      console.log('üìä R√©cup√©ration des statistiques de nettoyage...');
      
      const result = await db.query('SELECT * FROM get_session_cleanup_stats()');
      const stats = result.rows[0];
      
      console.log('‚úÖ Statistiques r√©cup√©r√©es:', stats);
      
      res.json({
        success: true,
        stats: {
          total: parseInt(stats.total_sessions),
          active: parseInt(stats.active_sessions), 
          inactive: parseInt(stats.inactive_sessions),
          old: parseInt(stats.old_sessions),
          cleanup_candidates: parseInt(stats.cleanup_candidates)
        }
      });
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error);
      res.status(500).json({
        success: false,
        error: 'Erreur lors de la r√©cup√©ration des statistiques'
      });
    }
  }

  // Obtenir la vue d√©taill√©e des sessions √† nettoyer
  static async getCleanupView(req, res) {
    try {
      const streamerId = req.user?.id;
      const isAdmin = req.user?.role === 'admin';
      
      console.log('üîç R√©cup√©ration des sessions √† nettoyer pour:', streamerId);
      
      let query = 'SELECT * FROM sessions_cleanup_view';
      let params = [];
      
      // Si pas admin, filtrer par streamer
      if (!isAdmin && streamerId) {
        query += ' WHERE streamer_id = $1';
        params.push(streamerId);
      }
      
      query += ' ORDER BY last_activity DESC';
      
      const result = await db.query(query, params);
      const sessions = result.rows.map(session => ({
        ...session,
        hours_inactive: parseFloat(session.hours_inactive),
        days_old: parseFloat(session.days_old),
        total_propositions: parseInt(session.total_propositions)
      }));
      
      console.log(`‚úÖ ${sessions.length} sessions r√©cup√©r√©es`);
      
      res.json({
        success: true,
        sessions: sessions,
        user_role: req.user?.role || 'viewer'
      });
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de la vue:', error);
      res.status(500).json({
        success: false,
        error: 'Erreur lors de la r√©cup√©ration des sessions'
      });
    }
  }

  // Effectuer le nettoyage automatique
  static async performCleanup(req, res) {
    try {
      const { inactive_hours = 24, delete_old_days = 30, dry_run = false } = req.body;
      const isAdmin = req.user?.role === 'admin';
      
      // Seuls les admins peuvent faire le nettoyage global
      if (!isAdmin) {
        return res.status(403).json({
          success: false,
          error: 'Seuls les administrateurs peuvent effectuer le nettoyage global'
        });
      }
      
      console.log('üßπ Nettoyage des sessions:', { inactive_hours, delete_old_days, dry_run });
      
      if (dry_run) {
        // Mode simulation - compter seulement
        const deactivateQuery = `
          SELECT COUNT(*) as count 
          FROM sessions 
          WHERE active = TRUE 
            AND auto_cleanup = TRUE
            AND last_activity < (CURRENT_TIMESTAMP - ($1 || ' hours')::INTERVAL)
        `;
        
        const deleteQuery = `
          SELECT COUNT(*) as count 
          FROM sessions 
          WHERE auto_cleanup = TRUE
            AND active = FALSE 
            AND updated_at < (CURRENT_TIMESTAMP - ($1 || ' days')::INTERVAL)
        `;
        
        const [deactivateResult, deleteResult] = await Promise.all([
          db.query(deactivateQuery, [inactive_hours]),
          db.query(deleteQuery, [delete_old_days])
        ]);
        
        res.json({
          success: true,
          dry_run: true,
          results: [
            {
              action: 'deactivated',
              session_count: parseInt(deactivateResult.rows[0].count),
              details: `Sessions √† d√©sactiver apr√®s ${inactive_hours} heures d'inactivit√©`
            },
            {
              action: 'deleted', 
              session_count: parseInt(deleteResult.rows[0].count),
              details: `Sessions √† supprimer apr√®s ${delete_old_days} jours`
            }
          ]
        });
        
      } else {
        // Nettoyage r√©el
        const result = await db.query(
          'SELECT * FROM cleanup_inactive_sessions($1, $2)',
          [inactive_hours, delete_old_days]
        );
        
        const results = result.rows.map(row => ({
          action: row.action,
          session_count: parseInt(row.session_count),
          details: row.details
        }));
        
        console.log('‚úÖ Nettoyage termin√©:', results);
        
        res.json({
          success: true,
          dry_run: false,
          results: results
        });
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors du nettoyage:', error);
      res.status(500).json({
        success: false,
        error: 'Erreur lors du nettoyage des sessions'
      });
    }
  }

  // D√©sactiver manuellement une session sp√©cifique
  static async deactivateSession(req, res) {
    try {
      const { sessionId } = req.params;
      const streamerId = req.user?.id;
      const isAdmin = req.user?.role === 'admin';
      
      console.log('üî¥ D√©sactivation manuelle de la session:', sessionId);
      
      // V√©rifier que la session existe et appartient au streamer (sauf admin)
      const session = await Session.findById(sessionId);
      if (!session) {
        return res.status(404).json({
          success: false,
          error: 'Session non trouv√©e'
        });
      }
      
      if (!isAdmin && session.streamer_id !== streamerId) {
        return res.status(403).json({
          success: false,
          error: 'Vous ne pouvez d√©sactiver que vos propres sessions'
        });
      }
      
      // D√©sactiver la session
      const updatedSession = await Session.updateActive(sessionId, false);
      
      console.log('‚úÖ Session d√©sactiv√©e:', updatedSession.code);
      
      res.json({
        success: true,
        message: 'Session d√©sactiv√©e avec succ√®s',
        session: updatedSession
      });
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la d√©sactivation:', error);
      res.status(500).json({
        success: false,
        error: 'Erreur lors de la d√©sactivation de la session'
      });
    }
  }

  // Supprimer manuellement une session sp√©cifique
  static async deleteSession(req, res) {
    try {
      const { sessionId } = req.params;
      const streamerId = req.user?.id;
      const isAdmin = req.user?.role === 'admin';
      
      console.log('üóëÔ∏è Suppression manuelle de la session:', sessionId);
      
      // V√©rifier que la session existe et appartient au streamer (sauf admin)
      const session = await Session.findById(sessionId);
      if (!session) {
        return res.status(404).json({
          success: false,
          error: 'Session non trouv√©e'
        });
      }
      
      if (!isAdmin && session.streamer_id !== streamerId) {
        return res.status(403).json({
          success: false,
          error: 'Vous ne pouvez supprimer que vos propres sessions'
        });
      }
      
      // Supprimer la session (et toutes ses propositions via CASCADE)
      const deletedSession = await Session.delete(sessionId);
      
      console.log('‚úÖ Session supprim√©e:', deletedSession.code);
      
      res.json({
        success: true,
        message: 'Session supprim√©e avec succ√®s',
        session: deletedSession
      });
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression:', error);
      res.status(500).json({
        success: false,
        error: 'Erreur lors de la suppression de la session'
      });
    }
  }

  // Configuration du nettoyage automatique pour un streamer
  static async updateAutoCleanupSettings(req, res) {
    try {
      const { sessionId } = req.params;
      const { auto_cleanup } = req.body;
      const streamerId = req.user?.id;
      
      console.log('‚öôÔ∏è Mise √† jour du nettoyage auto pour:', sessionId, auto_cleanup);
      
      // V√©rifier que la session appartient au streamer
      const session = await Session.findById(sessionId);
      if (!session) {
        return res.status(404).json({
          success: false,
          error: 'Session non trouv√©e'
        });
      }
      
      if (session.streamer_id !== streamerId) {
        return res.status(403).json({
          success: false,
          error: 'Vous ne pouvez modifier que vos propres sessions'
        });
      }
      
      // Mettre √† jour le param√®tre auto_cleanup
      const updatedSession = await Session.update(sessionId, { auto_cleanup });
      
      console.log('‚úÖ Param√®tre auto_cleanup mis √† jour');
      
      res.json({
        success: true,
        message: `Nettoyage automatique ${auto_cleanup ? 'activ√©' : 'd√©sactiv√©'}`,
        session: updatedSession
      });
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour:', error);
      res.status(500).json({
        success: false,
        error: 'Erreur lors de la mise √† jour des param√®tres'
      });
    }
  }

  // Mettre √† jour l'activit√© d'une session manuellement
  static async updateSessionActivity(req, res) {
    try {
      const { sessionId } = req.params;
      const streamerId = req.user?.id;
      
      console.log('‚è∞ Mise √† jour de l\'activit√© pour:', sessionId);
      
      // V√©rifier que la session appartient au streamer
      const session = await Session.findById(sessionId);
      if (!session) {
        return res.status(404).json({
          success: false,
          error: 'Session non trouv√©e'
        });
      }
      
      if (session.streamer_id !== streamerId) {
        return res.status(403).json({
          success: false,
          error: 'Vous ne pouvez modifier que vos propres sessions'
        });
      }
      
      // Mettre √† jour last_activity
      await db.query(
        'UPDATE sessions SET last_activity = CURRENT_TIMESTAMP WHERE id = $1',
        [sessionId]
      );
      
      console.log('‚úÖ Activit√© mise √† jour');
      
      res.json({
        success: true,
        message: 'Activit√© de la session mise √† jour'
      });
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour de l\'activit√©:', error);
      res.status(500).json({
        success: false,
        error: 'Erreur lors de la mise √† jour de l\'activit√©'
      });
    }
  }
}

module.exports = SessionCleanupController; 